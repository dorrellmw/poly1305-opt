#!/bin/sh

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF
Usage: ./configure [options]

Help:
  -h, --help                          print this message

Configuration options:
  --force-32bits                      (try to) build for 32bits regardless of underlying system
  --force-64bits                      (try to) build for 64bits regardless of underlying system

EOF
exit 1
fi


cleanup() {
    rm -f test.o
    rm -f test
    rm -f test.log
}

fatal_error() {
    cleanup
    echo "ERROR: $@"
    exit 1
}

try_asm() {
    printf "%s\n%s\n" "$asmheader" "$1" | $AS $ASFLAGSTEST -o test.o - >test.log 2>&1
    res=$?
    cat test.log >> $outputlog
    return $res
}

test_for_asm_instruction_set() {
    echo "checking for $2.." >>$outputlog
    if try_asm "$1"; then
        echo "#define $2" >> $outputheader
    fi
}

test_for_asm_macro_parameter_convention() {
    echo "checking for $4.." >>$outputlog
    prog=$(printf "%s\n%s\n%s\n%s\n" ".macro TEST1 op" "$1 $3, $3" ".endm" "TEST1 $2")
    if try_asm "$prog"; then
        echo "#define $4" >> $outputheader
    fi
}

test_for_asm_function_annotation() {
    echo "checking for $1.." >>$outputlog
    prog=$(printf ".globl %s\n%s %s\n%s\n" "myfn" "$1" "myfn" "myfn:")
    try_asm "$prog"
    res=$?
    return $res
}

does_c_define_exist() {
    echo "checking for $1.." >> $outputlog
    prog=$(printf "int main() {\n#if defined(%s)\nreturn 0;\n#else\n#error error\n#endif\n}" "$1")
    CC="${CC:-gcc}"
    printf "%s\n" "$prog" | $CC -x c -c -o test.o - >test.log 2>&1
    res=$?
    cat test.log >> $outputlog
    return $res
}

test_for_gnu_make() {
    if [ "$GNUMAKE" = "" ]; then
        echo "checking for gnu make as '$1'" >> $outputlog
        res=`$1 -v 2>$outputlog | grep GNU`
        if [ "$res" != "" ]; then
            GNUMAKE="$1"
        fi
    fi
}

# options
outputheader="src/asmopt.h"
outputmake="asmopt.mak"
outputlog="config.log"
asmheader=".text"

# handle input paramters
while [ "$1" != "" ]; do
    arg="${1#*=}"
    case $1 in
        * ) echo "Unknown paramaters $1, skipping.."
            ;;
    esac
    shift
done

GNUMAKE=""
test_for_gnu_make "make"
test_for_gnu_make "gmake"
if [ "$GNUMAKE" = "" ]; then
    fatal_error "Unable to find gnu make! (tried make, gmake)"
fi

# make variables
AR="${AR:-ar}"
AS="${CC:-gcc}"
ASFLAGS=""
ASFLAGSTEST="-x assembler -c"
ARCH="generic"

PROJECTVERMAJOR="1"

# set things up
rm -f $outputmake
> $outputlog

cat > $outputheader << EOF
#ifndef ASMOPT_POLY1305_H
#define ASMOPT_POLY1305_H

EOF

# assembler detection
foundas="no"
if try_asm "xorb %al, %al"; then
    ASFLAGSTEST="$ASFLAGSTEST -m32"
    echo "#define ARCH_X86" >> $outputheader
    ARCH="x86"


    # figure out which instruction sets the assembler supports
    test_for_asm_instruction_set "vpaddq %zmm0, %zmm0, %zmm0" HAVE_AVX512
    test_for_asm_instruction_set "vpaddq %ymm0, %ymm0, %ymm0" HAVE_AVX2
    test_for_asm_instruction_set "vpaddq %xmm0, %xmm0, %xmm0" HAVE_AVX
    test_for_asm_instruction_set "vprotd \$15, %xmm0, %xmm0" HAVE_XOP
    test_for_asm_instruction_set "crc32b %cl, %ebx" HAVE_SSE4_2
    test_for_asm_instruction_set "pblendw \$0, %xmm0, %xmm0" HAVE_SSE4_1
    test_for_asm_instruction_set "pshufb %xmm0, %xmm0" HAVE_SSSE3
    test_for_asm_instruction_set "lddqu 0(%esi), %xmm0" HAVE_SSE3
    test_for_asm_instruction_set "pmuludq %xmm0, %xmm0" HAVE_SSE2
    test_for_asm_instruction_set "movaps 0(%esi), %xmm0" HAVE_SSE
    test_for_asm_instruction_set "punpckhdq %mm0, %mm0" HAVE_MMX

    # OSX as uses a different macro paramter convention
    test_for_asm_macro_parameter_convention "\op" "xorl" "%eax" HAVE_SLASHMACRO
    test_for_asm_macro_parameter_convention "\$0" "xorl" "%eax" HAVE_DOLLARMACRO

    # make sure the C compiler is actually speaking x86
    if does_c_define_exist "__i386__"; then
       ASFLAGS="$ASFLAGS -m32 -c"
    elif does_c_define_exist "__x86_64__"; then
       ASFLAGS="$ASFLAGS -m64 -c"
    else
       fatal_error "[x86] Unable to determine output bits!"
    fi

    if test_for_asm_function_annotation ".hidden"; then
        echo "#define HAVE_AS_HIDDEN" >> $outputheader
    elif test_for_asm_function_annotation ".private_extern"; then
        echo "#define HAVE_AS_PRIVATE_EXTERN" >> $outputheader
    fi

    foundas="yes"
elif try_asm "and r0, r0, r0"; then
    echo "#define ARCH_ARM" >> $outputheader
    ARCH="arm"
    foundas="yes"

    test_for_asm_macro_parameter_convention "\op" "tst" "r0" HAVE_SLASHMACRO
    test_for_asm_macro_parameter_convention "\$0" "tst" "r0" HAVE_DOLLARMACRO

    if does_c_define_exist "__arm__"; then
        asmheader=$(printf ".arch armv6\n.text")
        test_for_asm_instruction_set "uqadd8 r3,r3,r3" HAVE_ARMv6
        asmheader=$(printf ".arch armv7-a\n.text")
        test_for_asm_instruction_set "pli [r0]" HAVE_ARMv7

        asmheader=$(printf ".arch armv7-a\n.fpu neon\n.text")
        test_for_asm_instruction_set "veor d0,d0,d0" HAVE_NEON
        asmheader=$(printf ".arch armv7-a\n.fpu vfpv3\n.text")
        test_for_asm_instruction_set "fcpyd d3,d22" HAVE_VFP3
        asmheader=$(printf ".arch armv7-a\n.fpu vfpv3-d16\n.text")
        test_for_asm_instruction_set "fcpyd d3,d4" HAVE_VFP3D16
        asmheader=$(printf ".arch armv7-a\n.fpu neon-vfpv4\n.text")
        test_for_asm_instruction_set "vfma.f32 q1, q2, q3" HAVE_VFP4

        asmheader=$(printf ".arch armv7-a\n.arch_extension iwmmxt\n.text")
        test_for_asm_instruction_set "wzeroge wr7" HAVE_IWMMXT
        asmheader=$(printf ".arch armv7-a\n.arch_extension idiv\n.text")
        test_for_asm_instruction_set "udiv r0, r1, r2" HAVE_IDIVA
        asmheader=$(printf ".arch armv7-a\n.arch_extension idiv\n.text\n.thumb\n.thumb_func")
        test_for_asm_instruction_set "udiv r0, r1, r2" HAVE_IDIVT
    elif does_c_define_exist "__aarch64__"; then
        asmheader=$(printf ".arch armv8-a\n.text")
        test_for_asm_instruction_set "hlt" HAVE_ARMv8

        asmheader=$(printf ".arch armv8-a\n.fpu neon-fp-armv8\n.text")
        test_for_asm_instruction_set "vvselge.f32 s4, s1, s23" HAVE_VFP4
        asmheader=$(printf ".arch armv8-a\n.fpu neon-fp-armv8\n.text")
        test_for_asm_instruction_set "vcvta.u32.f32 s2, s3" HAVE_ASIMD

        asmheader=$(printf ".arch armv8-a\n.arch_extension crypto\n.text")
        test_for_asm_instruction_set "aese.8 q0, q0" HAVE_AES

        asmheader=$(printf ".arch armv8-a\n.arch_extension crypto\n.text")
        test_for_asm_instruction_set "sha1p.32 q0,q0,q0" HAVE_SHA1
        asmheader=$(printf ".arch armv8-a\n.arch_extension crypto\n.text")
        test_for_asm_instruction_set "sha256h.32 q0, q0, q0" HAVE_SHA256
        asmheader=$(printf ".arch armv8-a\n.arch_extension crypto\n.text")
        test_for_asm_instruction_set "vmull.p64	q0, d0, d0" HAVE_PMULL
        asmheader=$(printf ".arch armv8-a\n.arch_extension crc\n.text")
        test_for_asm_instruction_set "crc32b r0, r1, r2" HAVE_CRC32
    else
        fatal_error "[ARM] Unable to determine output bits!"
    fi

fi

if [ "$foundas" = "no" ]; then
    fatal_error "Unable to find a working assembler/assembler dialect!"
fi

# only GCC style for now
AR="$AR rc "

cat > $outputmake << EOF
AR=$AR
AS=$AS
ASFLAGS=$ASFLAGS
ARCH=$ARCH
EOF

cat >> $outputheader << EOF

#if !defined(BUILDING_ASM)

#include <stddef.h>

#endif /* !defined(BUILDING_ASM) */

#endif /* ASMOPT_POLY1305_H */

EOF

cleanup

$GNUMAKE clean

echo "$outputheader generated for poly1305, run '$GNUMAKE' now"

