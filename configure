#!/bin/sh

cleanup() {
    rm -f test.o
    rm -f test
    rm -f test.log
}

fatal_error() {
    cleanup
    echo "ERROR: $@"
    exit 1
}

try_asm() {
    printf "%s\n%s\n" "$asmheader" "$1" | $AS $ASFLAGSTEST -o test.o - >test.log 2>&1
    res=$?
    cat test.log >> $outputlog
    return $res
}

test_for_asm_instruction_set() {
    echo "checking for $2.." >>$outputlog
    if try_asm "$1"; then
        echo "#define $2" >> $outputheader
    fi
}

test_for_asm_function_annotation() {
    echo "checking for $1.." >>$outputlog
    prog=$(printf ".globl %s\n%s %s\n%s\n" "myfn" "$1" "myfn" "myfn:")
    try_asm "$prog"
    res=$?
    return $res
}

does_c_define_exist() {
    echo "checking for $1.." >> $outputlog
    prog=$(printf "int main() {\n#if defined(%s)\nreturn 0;\n#else\n#error error\n#endif\n}" "$1")
    CC="${CC:-gcc}"
    printf "%s\n" "$prog" | $CC -x c -c -o test.o - >test.log 2>&1
    res=$?
    cat test.log >> $outputlog
    return $res
}

# options
outputheader="src/asmopt.h"
outputmake="asmopt.mak"
outputlog="config.log"
asmheader=".text"

# handle input paramters
while [ "$1" != "" ]; do
    arg="${1#*=}"
    case $1 in
        * ) echo "Unknown paramaters $1, skipping.."
            ;;
    esac
    shift
done

# make variables
AS="${CC:-gcc}"
ASFLAGS=""
ASFLAGSTEST="-x assembler -c"

# set things up
rm -f $outputmake
> $outputlog

cat > $outputheader << EOF
#ifndef ASMOPT_POLY1305_H
#define ASMOPT_POLY1305_H

EOF

# assembler detection
foundas="no"
if try_asm "xorb %al, %al"; then
    ASFLAGSTEST="$ASFLAGSTEST -m32"

    # make sure the C compiler is actually speaking x86
    if does_c_define_exist "__i386__"; then
       ASFLAGS="$ASFLAGS -m32 -c"
    elif does_c_define_exist "__x86_64__"; then
       ASFLAGS="$ASFLAGS -m64 -c"
    else
       fatal_error "[x86] Unable to determine output bits!"
    fi

    if test_for_asm_function_annotation ".hidden"; then
        echo "#define HAVE_AS_HIDDEN" >> $outputheader
    elif test_for_asm_function_annotation ".private_extern"; then
        echo "#define HAVE_AS_PRIVATE_EXTERN" >> $outputheader
    fi

    foundas="yes"
elif try_asm "and r0, r0, r0"; then
    foundas="yes"
fi

if [ "$foundas" = "no" ]; then
    fatal_error "Unable to find a working assembler/assembler dialect!"
fi

cat > $outputmake << EOF
AS=$AS
ASFLAGS=$ASFLAGS
EOF

cat >> $outputheader << EOF

#endif /* ASMOPT_POLY1305_H */

EOF

cleanup

make clean

echo "$outputheader generated for poly1305, run make now"

